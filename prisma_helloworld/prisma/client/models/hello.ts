
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `hello` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model hello
 * 
 */
export type helloModel = runtime.Types.Result.DefaultSelection<Prisma.$helloPayload>

export type AggregateHello = {
  _count: HelloCountAggregateOutputType | null
  _min: HelloMinAggregateOutputType | null
  _max: HelloMaxAggregateOutputType | null
}

export type HelloMinAggregateOutputType = {
  id: string | null
  text: string | null
}

export type HelloMaxAggregateOutputType = {
  id: string | null
  text: string | null
}

export type HelloCountAggregateOutputType = {
  id: number
  text: number
  _all: number
}


export type HelloMinAggregateInputType = {
  id?: true
  text?: true
}

export type HelloMaxAggregateInputType = {
  id?: true
  text?: true
}

export type HelloCountAggregateInputType = {
  id?: true
  text?: true
  _all?: true
}

export type HelloAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which hello to aggregate.
   */
  where?: Prisma.helloWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of hellos to fetch.
   */
  orderBy?: Prisma.helloOrderByWithRelationInput | Prisma.helloOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.helloWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` hellos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` hellos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned hellos
  **/
  _count?: true | HelloCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: HelloMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: HelloMaxAggregateInputType
}

export type GetHelloAggregateType<T extends HelloAggregateArgs> = {
      [P in keyof T & keyof AggregateHello]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateHello[P]>
    : Prisma.GetScalarType<T[P], AggregateHello[P]>
}




export type helloGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.helloWhereInput
  orderBy?: Prisma.helloOrderByWithAggregationInput | Prisma.helloOrderByWithAggregationInput[]
  by: Prisma.HelloScalarFieldEnum[] | Prisma.HelloScalarFieldEnum
  having?: Prisma.helloScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: HelloCountAggregateInputType | true
  _min?: HelloMinAggregateInputType
  _max?: HelloMaxAggregateInputType
}

export type HelloGroupByOutputType = {
  id: string
  text: string
  _count: HelloCountAggregateOutputType | null
  _min: HelloMinAggregateOutputType | null
  _max: HelloMaxAggregateOutputType | null
}

type GetHelloGroupByPayload<T extends helloGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<HelloGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof HelloGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], HelloGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], HelloGroupByOutputType[P]>
      }
    >
  >



export type helloWhereInput = {
  AND?: Prisma.helloWhereInput | Prisma.helloWhereInput[]
  OR?: Prisma.helloWhereInput[]
  NOT?: Prisma.helloWhereInput | Prisma.helloWhereInput[]
  id?: Prisma.StringFilter<"hello"> | string
  text?: Prisma.StringFilter<"hello"> | string
}

export type helloOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
}

export type helloWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.helloWhereInput | Prisma.helloWhereInput[]
  OR?: Prisma.helloWhereInput[]
  NOT?: Prisma.helloWhereInput | Prisma.helloWhereInput[]
  text?: Prisma.StringFilter<"hello"> | string
}, "id">

export type helloOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  _count?: Prisma.helloCountOrderByAggregateInput
  _max?: Prisma.helloMaxOrderByAggregateInput
  _min?: Prisma.helloMinOrderByAggregateInput
}

export type helloScalarWhereWithAggregatesInput = {
  AND?: Prisma.helloScalarWhereWithAggregatesInput | Prisma.helloScalarWhereWithAggregatesInput[]
  OR?: Prisma.helloScalarWhereWithAggregatesInput[]
  NOT?: Prisma.helloScalarWhereWithAggregatesInput | Prisma.helloScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"hello"> | string
  text?: Prisma.StringWithAggregatesFilter<"hello"> | string
}

export type helloCreateInput = {
  id?: string
  text: string
}

export type helloUncheckedCreateInput = {
  id?: string
  text: string
}

export type helloUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
}

export type helloUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
}

export type helloCreateManyInput = {
  id?: string
  text: string
}

export type helloUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
}

export type helloUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
}

export type helloCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
}

export type helloMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
}

export type helloMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}



export type helloSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  text?: boolean
}, ExtArgs["result"]["hello"]>

export type helloSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  text?: boolean
}, ExtArgs["result"]["hello"]>

export type helloSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  text?: boolean
}, ExtArgs["result"]["hello"]>

export type helloSelectScalar = {
  id?: boolean
  text?: boolean
}

export type helloOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "text", ExtArgs["result"]["hello"]>

export type $helloPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "hello"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    text: string
  }, ExtArgs["result"]["hello"]>
  composites: {}
}

export type helloGetPayload<S extends boolean | null | undefined | helloDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$helloPayload, S>

export type helloCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<helloFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: HelloCountAggregateInputType | true
  }

export interface helloDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['hello'], meta: { name: 'hello' } }
  /**
   * Find zero or one Hello that matches the filter.
   * @param {helloFindUniqueArgs} args - Arguments to find a Hello
   * @example
   * // Get one Hello
   * const hello = await prisma.hello.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends helloFindUniqueArgs>(args: Prisma.SelectSubset<T, helloFindUniqueArgs<ExtArgs>>): Prisma.Prisma__helloClient<runtime.Types.Result.GetResult<Prisma.$helloPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Hello that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {helloFindUniqueOrThrowArgs} args - Arguments to find a Hello
   * @example
   * // Get one Hello
   * const hello = await prisma.hello.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends helloFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, helloFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__helloClient<runtime.Types.Result.GetResult<Prisma.$helloPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Hello that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {helloFindFirstArgs} args - Arguments to find a Hello
   * @example
   * // Get one Hello
   * const hello = await prisma.hello.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends helloFindFirstArgs>(args?: Prisma.SelectSubset<T, helloFindFirstArgs<ExtArgs>>): Prisma.Prisma__helloClient<runtime.Types.Result.GetResult<Prisma.$helloPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Hello that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {helloFindFirstOrThrowArgs} args - Arguments to find a Hello
   * @example
   * // Get one Hello
   * const hello = await prisma.hello.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends helloFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, helloFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__helloClient<runtime.Types.Result.GetResult<Prisma.$helloPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Hellos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {helloFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Hellos
   * const hellos = await prisma.hello.findMany()
   * 
   * // Get first 10 Hellos
   * const hellos = await prisma.hello.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const helloWithIdOnly = await prisma.hello.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends helloFindManyArgs>(args?: Prisma.SelectSubset<T, helloFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$helloPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Hello.
   * @param {helloCreateArgs} args - Arguments to create a Hello.
   * @example
   * // Create one Hello
   * const Hello = await prisma.hello.create({
   *   data: {
   *     // ... data to create a Hello
   *   }
   * })
   * 
   */
  create<T extends helloCreateArgs>(args: Prisma.SelectSubset<T, helloCreateArgs<ExtArgs>>): Prisma.Prisma__helloClient<runtime.Types.Result.GetResult<Prisma.$helloPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Hellos.
   * @param {helloCreateManyArgs} args - Arguments to create many Hellos.
   * @example
   * // Create many Hellos
   * const hello = await prisma.hello.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends helloCreateManyArgs>(args?: Prisma.SelectSubset<T, helloCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Hellos and returns the data saved in the database.
   * @param {helloCreateManyAndReturnArgs} args - Arguments to create many Hellos.
   * @example
   * // Create many Hellos
   * const hello = await prisma.hello.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Hellos and only return the `id`
   * const helloWithIdOnly = await prisma.hello.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends helloCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, helloCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$helloPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Hello.
   * @param {helloDeleteArgs} args - Arguments to delete one Hello.
   * @example
   * // Delete one Hello
   * const Hello = await prisma.hello.delete({
   *   where: {
   *     // ... filter to delete one Hello
   *   }
   * })
   * 
   */
  delete<T extends helloDeleteArgs>(args: Prisma.SelectSubset<T, helloDeleteArgs<ExtArgs>>): Prisma.Prisma__helloClient<runtime.Types.Result.GetResult<Prisma.$helloPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Hello.
   * @param {helloUpdateArgs} args - Arguments to update one Hello.
   * @example
   * // Update one Hello
   * const hello = await prisma.hello.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends helloUpdateArgs>(args: Prisma.SelectSubset<T, helloUpdateArgs<ExtArgs>>): Prisma.Prisma__helloClient<runtime.Types.Result.GetResult<Prisma.$helloPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Hellos.
   * @param {helloDeleteManyArgs} args - Arguments to filter Hellos to delete.
   * @example
   * // Delete a few Hellos
   * const { count } = await prisma.hello.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends helloDeleteManyArgs>(args?: Prisma.SelectSubset<T, helloDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Hellos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {helloUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Hellos
   * const hello = await prisma.hello.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends helloUpdateManyArgs>(args: Prisma.SelectSubset<T, helloUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Hellos and returns the data updated in the database.
   * @param {helloUpdateManyAndReturnArgs} args - Arguments to update many Hellos.
   * @example
   * // Update many Hellos
   * const hello = await prisma.hello.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Hellos and only return the `id`
   * const helloWithIdOnly = await prisma.hello.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends helloUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, helloUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$helloPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Hello.
   * @param {helloUpsertArgs} args - Arguments to update or create a Hello.
   * @example
   * // Update or create a Hello
   * const hello = await prisma.hello.upsert({
   *   create: {
   *     // ... data to create a Hello
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Hello we want to update
   *   }
   * })
   */
  upsert<T extends helloUpsertArgs>(args: Prisma.SelectSubset<T, helloUpsertArgs<ExtArgs>>): Prisma.Prisma__helloClient<runtime.Types.Result.GetResult<Prisma.$helloPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Hellos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {helloCountArgs} args - Arguments to filter Hellos to count.
   * @example
   * // Count the number of Hellos
   * const count = await prisma.hello.count({
   *   where: {
   *     // ... the filter for the Hellos we want to count
   *   }
   * })
  **/
  count<T extends helloCountArgs>(
    args?: Prisma.Subset<T, helloCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], HelloCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Hello.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HelloAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends HelloAggregateArgs>(args: Prisma.Subset<T, HelloAggregateArgs>): Prisma.PrismaPromise<GetHelloAggregateType<T>>

  /**
   * Group by Hello.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {helloGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends helloGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: helloGroupByArgs['orderBy'] }
      : { orderBy?: helloGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, helloGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHelloGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the hello model
 */
readonly fields: helloFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for hello.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__helloClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the hello model
 */
export interface helloFieldRefs {
  readonly id: Prisma.FieldRef<"hello", 'String'>
  readonly text: Prisma.FieldRef<"hello", 'String'>
}
    

// Custom InputTypes
/**
 * hello findUnique
 */
export type helloFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the hello
   */
  select?: Prisma.helloSelect<ExtArgs> | null
  /**
   * Omit specific fields from the hello
   */
  omit?: Prisma.helloOmit<ExtArgs> | null
  /**
   * Filter, which hello to fetch.
   */
  where: Prisma.helloWhereUniqueInput
}

/**
 * hello findUniqueOrThrow
 */
export type helloFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the hello
   */
  select?: Prisma.helloSelect<ExtArgs> | null
  /**
   * Omit specific fields from the hello
   */
  omit?: Prisma.helloOmit<ExtArgs> | null
  /**
   * Filter, which hello to fetch.
   */
  where: Prisma.helloWhereUniqueInput
}

/**
 * hello findFirst
 */
export type helloFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the hello
   */
  select?: Prisma.helloSelect<ExtArgs> | null
  /**
   * Omit specific fields from the hello
   */
  omit?: Prisma.helloOmit<ExtArgs> | null
  /**
   * Filter, which hello to fetch.
   */
  where?: Prisma.helloWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of hellos to fetch.
   */
  orderBy?: Prisma.helloOrderByWithRelationInput | Prisma.helloOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for hellos.
   */
  cursor?: Prisma.helloWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` hellos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` hellos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of hellos.
   */
  distinct?: Prisma.HelloScalarFieldEnum | Prisma.HelloScalarFieldEnum[]
}

/**
 * hello findFirstOrThrow
 */
export type helloFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the hello
   */
  select?: Prisma.helloSelect<ExtArgs> | null
  /**
   * Omit specific fields from the hello
   */
  omit?: Prisma.helloOmit<ExtArgs> | null
  /**
   * Filter, which hello to fetch.
   */
  where?: Prisma.helloWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of hellos to fetch.
   */
  orderBy?: Prisma.helloOrderByWithRelationInput | Prisma.helloOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for hellos.
   */
  cursor?: Prisma.helloWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` hellos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` hellos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of hellos.
   */
  distinct?: Prisma.HelloScalarFieldEnum | Prisma.HelloScalarFieldEnum[]
}

/**
 * hello findMany
 */
export type helloFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the hello
   */
  select?: Prisma.helloSelect<ExtArgs> | null
  /**
   * Omit specific fields from the hello
   */
  omit?: Prisma.helloOmit<ExtArgs> | null
  /**
   * Filter, which hellos to fetch.
   */
  where?: Prisma.helloWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of hellos to fetch.
   */
  orderBy?: Prisma.helloOrderByWithRelationInput | Prisma.helloOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing hellos.
   */
  cursor?: Prisma.helloWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` hellos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` hellos.
   */
  skip?: number
  distinct?: Prisma.HelloScalarFieldEnum | Prisma.HelloScalarFieldEnum[]
}

/**
 * hello create
 */
export type helloCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the hello
   */
  select?: Prisma.helloSelect<ExtArgs> | null
  /**
   * Omit specific fields from the hello
   */
  omit?: Prisma.helloOmit<ExtArgs> | null
  /**
   * The data needed to create a hello.
   */
  data: Prisma.XOR<Prisma.helloCreateInput, Prisma.helloUncheckedCreateInput>
}

/**
 * hello createMany
 */
export type helloCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many hellos.
   */
  data: Prisma.helloCreateManyInput | Prisma.helloCreateManyInput[]
}

/**
 * hello createManyAndReturn
 */
export type helloCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the hello
   */
  select?: Prisma.helloSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the hello
   */
  omit?: Prisma.helloOmit<ExtArgs> | null
  /**
   * The data used to create many hellos.
   */
  data: Prisma.helloCreateManyInput | Prisma.helloCreateManyInput[]
}

/**
 * hello update
 */
export type helloUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the hello
   */
  select?: Prisma.helloSelect<ExtArgs> | null
  /**
   * Omit specific fields from the hello
   */
  omit?: Prisma.helloOmit<ExtArgs> | null
  /**
   * The data needed to update a hello.
   */
  data: Prisma.XOR<Prisma.helloUpdateInput, Prisma.helloUncheckedUpdateInput>
  /**
   * Choose, which hello to update.
   */
  where: Prisma.helloWhereUniqueInput
}

/**
 * hello updateMany
 */
export type helloUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update hellos.
   */
  data: Prisma.XOR<Prisma.helloUpdateManyMutationInput, Prisma.helloUncheckedUpdateManyInput>
  /**
   * Filter which hellos to update
   */
  where?: Prisma.helloWhereInput
  /**
   * Limit how many hellos to update.
   */
  limit?: number
}

/**
 * hello updateManyAndReturn
 */
export type helloUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the hello
   */
  select?: Prisma.helloSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the hello
   */
  omit?: Prisma.helloOmit<ExtArgs> | null
  /**
   * The data used to update hellos.
   */
  data: Prisma.XOR<Prisma.helloUpdateManyMutationInput, Prisma.helloUncheckedUpdateManyInput>
  /**
   * Filter which hellos to update
   */
  where?: Prisma.helloWhereInput
  /**
   * Limit how many hellos to update.
   */
  limit?: number
}

/**
 * hello upsert
 */
export type helloUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the hello
   */
  select?: Prisma.helloSelect<ExtArgs> | null
  /**
   * Omit specific fields from the hello
   */
  omit?: Prisma.helloOmit<ExtArgs> | null
  /**
   * The filter to search for the hello to update in case it exists.
   */
  where: Prisma.helloWhereUniqueInput
  /**
   * In case the hello found by the `where` argument doesn't exist, create a new hello with this data.
   */
  create: Prisma.XOR<Prisma.helloCreateInput, Prisma.helloUncheckedCreateInput>
  /**
   * In case the hello was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.helloUpdateInput, Prisma.helloUncheckedUpdateInput>
}

/**
 * hello delete
 */
export type helloDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the hello
   */
  select?: Prisma.helloSelect<ExtArgs> | null
  /**
   * Omit specific fields from the hello
   */
  omit?: Prisma.helloOmit<ExtArgs> | null
  /**
   * Filter which hello to delete.
   */
  where: Prisma.helloWhereUniqueInput
}

/**
 * hello deleteMany
 */
export type helloDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which hellos to delete
   */
  where?: Prisma.helloWhereInput
  /**
   * Limit how many hellos to delete.
   */
  limit?: number
}

/**
 * hello without action
 */
export type helloDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the hello
   */
  select?: Prisma.helloSelect<ExtArgs> | null
  /**
   * Omit specific fields from the hello
   */
  omit?: Prisma.helloOmit<ExtArgs> | null
}
